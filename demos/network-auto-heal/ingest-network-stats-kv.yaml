metadata:
  labels:
    nuclio.io/project-name: 2328ee8b-2dfa-44d7-802f-71d473518154
  name: ingeststats
spec:
  env:
    - type: value
      name: IGZ_USER
      value: iguazio
    - type: value
      name: IGZ_PASS
      value: datal@ke!
    - type: value
      name: SCORE_KV
      value: network_monitor_score
    - type: value
      name: RAW_KV
      value: network_monitor_historical
    - type: value
      name: NGINX_HOST
      value: webapi.default-tenant.app.poc605.staging.iguazio.com
    - type: value
      name: NGINX_PORT
      value: "8081"
    - type: value
      name: CONTAINER_NAME
      value: bigdata
    - type: value
      name: BATCH_SIZE
      value: "20"
    - type: value
      name: LINK_UP_WAIT_INTERVAL
      value: "10"
    - type: value
      name: LATENCY_UP_WAIT_INTERVAL
      value: "10"
    - type: value
      name: LATENCY_DOWN_WAIT_INTERVAL
      value: "10"
    - type: value
      name: PACKET_RATE_DOWN_WAIT_INTERVAL
      value: "3"
    - type: value
      name: PACKET_RATE_UP_WAIT_INTERVAL
      value: "10"
    - type: value
      name: UTILIZATION_50_80_WAIT_INTERVAL
      value: "3"
    - type: value
      name: UTILIZATION_80_100_WAIT_INTERVAL
      value: "3"
    - type: value
      name: UTILIZATION_DOWN_WAIT_INTERVAL
      value: "10"
  httpPort: 0
  imageHash: "1560218937845662793"
  description: "Showcases unstructured logging and a structured response."
  targetCpu: 0
  replicas: 0
  publish: false
  loggerSinks:
    - level: debug
  timeoutSeconds: 0
  disable: false
  alias: latest
  handler: "main:handler"
  maxReplicas: 1
  platform: {}
  version: -1
  readinessTimeoutSeconds: 0
  runtime: "python:3.6"
  minReplicas: 1
  resources: {}
  build:
    commands:
      - 'pip install requests'
    functionSourceCode: 
    timestamp: 1560218951
    runtimeAttributes:
      repositories: []
    noCleanup: false
    noCache: false
    offline: false
    codeEntryType: sourceCode
    image: ""
    dependencies: []
